AC_INIT(CVD,0.7)
AC_COPYRIGHT(Copyright foo)



orig_CXXFLAGS="$CXXFLAGS"

#Use builtin autoconf checks for all the programs we need.
AC_PROG_AWK
AC_PROG_CC
AC_PROG_CXX


#Switch testing language to C++
AC_LANG(C++)

###################################################
#
# Check for g++ version >= 3

if test x$GXX = xyes
then
	good_gcc=0

	AC_MSG_CHECKING([g++ version])
	changequote(,)
	gxx_major_version=`$CXX -v 2>&1 | $AWK -F '[ .]' '/version/{print $3}'`
	changequote([,])


	if test "$gxx_major_version" -lt 3
	then
		AC_MSG_RESULT([$gxx_major_version (failed)])
		AC_MSG_CHECKING([for other possibilities for g++ version >= 3])
		AC_MSG_RESULT([])
		#Check for some other possible G++s
		#Uncache che checks
		unset CXX
		unset ac_ct_CXX
		unset ac_cv_prog_ac_ct_CXX 
		unset ac_cv_prog_cxx_g
		unset GXX
		unset ac_cv_cxx_compiler_gnu

		#echo is a dummy target, which will always succeed.
		#If the c++ compiler is set to echo, then we know that
		#none of the proper ones worked.
		AC_PROG_CXX([g++-4 g++-3 echo])

		if test $ac_cv_prog_ac_ct_CXX = echo
		then
			AC_MSG_ERROR([g++ version >= 3.0 is required.])
		fi
	else
		AC_MSG_RESULT([$gxx_major_version (ok)])
	fi
fi



AC_ARG_WITH(debug,   [  --without-debug         compile without debug support],[debug=no], [])
AC_ARG_WITH(debug,   [  --with-debug=flags      compile with debug support],[debug="$withval"], [])
AC_ARG_WITH(profile, [  --with-profile=flags    compile with profile support],[profile="$withval"], [profile=no])

###################################################
#
# Deal with profiling and debugging
#
#
if test "$debug" != no || test "$profile" != no
then
	if test "$debug" == ""
	then
		if test "$ac_cv_cxx_compiler_gnu" = yes
		then
			CXXFLAGS="$orig_CXXFLAGS -g -ggdb"
		fi
	else
		CXXFLAGS="$orig_CXXFLAGS $debug"
	fi
elif test "$debug" = no
then
	#Remove debugging
	CXXFLAGS="$orig_CXXFLAGS"
fi

if test "$profile" != no
then
	if test "$profile" = yes
	then
		if test "$ac_cv_cxx_compiler_gnu" = yes
		then
			CXXFLAGS="$CXXFLAGS -p -pg"
			CFLAGS="$CFLAGS -p -pg"
		else 
			AC_MSG_WARN([I don't know how to switch on profiling for this compiler])
		fi
	else
		CXXFLAGS="$CXXFLAGS $profile"
		CFLAGS="$CFLAGS $profile"
	fi
fi

################################################################################
#
# Make position independent code
#

if test x$GXX = xyes
then
	CXXFLAGS="$CXXFLAGS -fPIC"
fi

#Start the compiler
AC_CHECK_HEADERS(stdio.h, [], [])

##################################################
#
# Cpu type detection and optimization
#

#Host detection
AC_CANONICAL_HOST


#Custom host CPU detection
AC_MSG_CHECKING([CPU type])
AC_ARG_WITH(CPu, [  --with-cpu=[type]         Specify pocessor type:
                            X86:
                              p3 p4 p4_64 xeon pM core2 core2_64 opteron
                              opteron_64 athlon athlon64 athlon64_64
                            SPARC:
                              sparc
                          Autodetection works on Linux only.])
if test "$with_cpu" == ""
then 
	case "$host" in
		*86*linux*)
			cpu="`awk '
	/Pentium III/						{print "p3";exit}
	/Intel\(R\) Pentium\(R\) 4/			{print "p4";exit}
	/Intel\(R\) Pentium\(R\) D/			{print "p4";exit}
	/Intel\(R\) Pentium\(R\) M/			{print "pM";exit}
	/Intel\(R\) Core\(TM\)2/			{print "core2";exit}
	/Intel\(R\) Xeon\(TM\)/				{print "xeon";exit}
	/Intel\(R\) XEON\(TM\)/				{print "xeon";exit}
	/AMD Athlon\(tm\) 64 Processor/		{print "athlon64";exit}
	/AMD Athlon\(tm\)/					{print "athlon";exit}
	/AMD Opteron\(tm\)/					{print "opteron";exit}' /proc/cpuinfo`"
		;;
		sparc*)
			cpu=sparc
			;;
	esac
else
	cpu="$with_cpu"
fi

AC_MSG_RESULT($cpu)

AC_ARG_WITH(simd, [  --without-simd          disable SIMD code])

if test "$with_simd" != "no"
then
	case "$host" in
		*86*linux*)
			simd_possible_options="sse2 sse mmxext mmx"
			simd_options=

			for dummyvar in 1
			do

				save_CPPFLAGS="$CPPFLAGS"

				AC_ARG_WITH(mmx, [    --with-mmx            force presence or absence of MMX  (x86 only)])	
				if test "$with_mmx" != yes && test "$with_mmx" != no 
				then
					save_CXXFLAGS="$CXXFLAGS"
					CXXFLAGS="$CXXFLAGS -mmmx"
					CPPFLAGS="$CPPFLAGS -mmmx"
					AC_CHECK_HEADERS(mmintrin.h, [], [])
					AC_MSG_CHECKING(for MMX support)
					AC_RUN_IFELSE([
						#include <mmintrin.h>
						int main()
						{
							__m64 a;
							a = _mm_setzero_si64();
							a = _m_pand(a, a);
							return 0;
						}], [mmx=yes], [mmx=no])
					AC_MSG_RESULT($mmx)
				else
					mmx="$with_mmx"
				fi

				if test $mmx = no
				then
					CXXFLAGS="$save_CXXFLAGS"
					break
				else	
					AC_DEFINE(CVD_HAVE_MMINTRIN)
					AC_SUBST(have_mmx,yes)
					simd_options="$simd_options mmx"
				fi

				

				#MMXEXT is pretty muxh the intersection of SSE nad 3Dnow!
				#and includes pshufw, movnta and prefetchnta
				save_CXXFLAGS="$CXXFLAGS"
				CXXFLAGS="$CXXFLAGS -msse"
				CPPFLAGS="$CPPFLAGS -msse"
				AC_ARG_WITH(mmxext, [    --with-mmxext         force presence or absence of MMXEXT (x86 only) ])	
				if test "$with_mmxext" != yes && test "$with_mmxext" != no 
				then
					AC_CHECK_HEADERS(xmmintrin.h, [], [])
					AC_MSG_CHECKING(for MMXEXT support)
					AC_RUN_IFELSE([
						#include <xmmintrin.h>
						int main()
						{
							__m64 a;
							a = _mm_setzero_si64();
							a = _m_pshufw(a, 0);
							return 0;
						}], [mmxext=yes], [mmxext=no])
					AC_MSG_RESULT($mmxext)
				else
					mmxext="$with_mmxext"
				fi

				if test $mmxext = no
				then
					CXXFLAGS="$save_CXXFLAGS"
					break
				else	
					AC_DEFINE(CVD_HAVE_XMMINTRIN)
					AC_DEFINE(CVD_HAVE_MMXEXT)
					AC_SUBST(have_mmxext,yes)
					simd_options="$simd_options mmxext"
				fi

				AC_ARG_WITH(sse, [    --with-sse            force presence or absence of SSE  (x86 only)])	
				if test "$with_sse" != yes && test "$with_sse" != no 
				then
					AC_MSG_CHECKING(for SSE support)
					AC_RUN_IFELSE([
						#include <xmmintrin.h>
						int main()
						{
							__m128 a;
							a = _mm_setzero_ps();
							a = _mm_add_ps(a, a);
							return 0;
						}], [sse=yes], [sse=no])
					AC_MSG_RESULT($sse)
				else
					sse="$with_sse"
				fi

				if test $sse = no
				then
					break
				else	
					AC_SUBST(have_sse,yes)
					AC_DEFINE(CVD_HAVE_SSE)
					simd_options="$simd_options sse"
				fi




				save_CXXFLAGS="$CXXFLAGS"
				CXXFLAGS="$CXXFLAGS -msse2"
				CPPFLAGS="$CPPFLAGS -msse2"
				 
				AC_ARG_WITH(sse2, [    --with-sse2           force presence or absence of SSE2  (x86 only)])	
				if test "$with_sse2" != yes && test "$with_sse2" != no 
				then
					AC_CHECK_HEADERS(emmintrin.h, [], [])
					AC_MSG_CHECKING(for SSE2 support)
					AC_RUN_IFELSE([
						#include <emmintrin.h>
						int main()
						{
							__m128d a;
							a = _mm_setzero_pd();
							a = _mm_add_pd(a, a);
							return 0;
						}], [sse2=yes], [sse2=no])
					AC_MSG_RESULT($sse2)
				else
					sse2="$with_sse2"
				fi

				if test $sse2 = no
				then
					CXXFLAGS="$save_CXXFLAGS"
					break
				else	
					AC_SUBST(have_sse2,yes)
					AC_DEFINE(CVD_HAVE_SSE2)
					AC_DEFINE(CVD_HAVE_EMMINTRIN)
					simd_options="$simd_options sse2"
				fi
			done
			
			CPPFLAGS="$save_CPPFLAGS"


			#Also check whether we have a 64-bit processor
			#(since some Pentium 4s have EM64T, and some don't)
			#At least AMD name their processors with x86_64 something different!
			AC_MSG_CHECKING([for 64-bit extensions])
			if grep -q lm /proc/cpuinfo
			then
				AC_MSG_RESULT(yes)
				AC_SUBST(have_64bit,yes)
				AC_DEFINE(CVD_HAVE_64BIT)
				# Append _64 onto the CPU name so that we can look up the right flags
				# if it is a pentuim 4
				cpu=$cpu"_64"
			else
				AC_MSG_RESULT(no)
				bit64=""
			fi
			
		;;
	esac
fi

if test "$cpu" == ""
then
	cpu=Unknown
fi


AC_ARG_WITH(optimize,   [  --without-optimize      compile without optimizations ],[optimize=no],[])
AC_ARG_WITH(optimize,   [  --with-optimize=flags   compile with optimization flags],[optimize="$withval"], [])

if test "$optimize" != no
then
	if test "$optimize" != ""
	then
		OFLAGS="$optimize"
	elif test "$ac_cv_cxx_compiler_gnu" = yes
	then
		AC_MSG_CHECKING([for best optimize flags])
		AC_MSG_RESULT([])
		
		#Find possible lest of compiler flags
		#FIXME, only GCC is currently supported
		cpuoptlist="`$AWK '/^'$cpu'/{$1=""; print}' make/march_flags`"
		
		#Test list in order to find the best compiler option
		save_CXXFLAGS="$CXXFLAGS"
		for mwhat in -march= -mcpu=
		do
			for i in $cpuoptlist
			do
				i="$mwhat$i"
				AC_MSG_CHECKING([$CXX supports $i]) 
				
				CXXFLAGS="$save_CXXFLAGS $i" 
				AC_COMPILE_IFELSE([int main(){}], [a=1], [a=0])

				if test $a = 1
				then
					AC_MSG_RESULT([yes])
					cpuopt=$i
					break 2
				else
					AC_MSG_RESULT([no])
				fi
			done
		done
		CXXFLAGS="$save_CXXFLAGS"
		
		
		opt="-O3 $cpuopt"
		if test "$cpuopt" = ""
		then
			AC_MSG_WARN([I do not know what the best flags are for this processor ($cpu).])
		fi
		OFLAGS="$opt"
	else
		AC_MSG_WARN([I do not know how to switch on optimizing for this compiler])
	fi
fi

AC_SUBST(OFLAGS,[$OFLAGS])

AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_RANLIB



AC_CONFIG_HEADERS
AC_HEADER_STDC

#From hereon, I use the following conventions:
#a variable, FOO is saves (for the purpose of testing additions to it) in
#save_FOO
#
#The variable `a' is used throughout as a temporary in tests


################################################################################
#
# Some notes on autoconf

#This if m4ese for a block comment :-)
changequote(<<,>>)
m4_if(<<

Quoting characters are [ and ]. There is no way to escape them, except by 
changing the quote character (see above). This is why I mostly use the 
shell construct:
if test foo

as opposed to 

if [ foo ]





AC_CHECK_LIB(library, function, success, failure)

Used to check for existence function a library. On success, it sets the
variable ac_cv_lib_library_function=yes (empty on failure). If the success
argument is missing of blank, eg:

AC_CHECK_LIB(library, function, [], [beep])

then the -llibrary is added to $LIBS automatically. Testing for the function
main is an easy way of checking that linking against a library works without
looking for a specific function.






AC_SUBST(a, b)

will substiture b for @a@ in a .in file, such as makefile.in



AC_DEFINE(a, b)

will make a #define a b. AC_DEFINE_UNQUOTED is needed if b is a shell expansion






>>)
changequote([,])

all_options="videodisplay jpeg tiff png ffmpeg toon lapack pthreads acml"
dodginess_options=

################################################################################
#
#  Some of my own M4 macros
#


################################################################################
#
# An OSX specific hack to get at stuff in /sw automatically
# 

if test "$host_vendor" = apple
then
	CPPFLAGS="$CPPFLAGS -I /sw/include -I/opt/local/include -I/usr/X11R6/include"
	LIBS="$LIBS -L/sw/lib -L/opt/local/lib"
	AC_MSG_NOTICE([Adding /sw to the build path.])
	AC_MSG_NOTICE([Adding /opt/local to the build path.])
	AC_MSG_NOTICE([Adding /usr/X11R6/include to the build path.])
	AC_SUBST(osx_hacks,yes)
fi

################################################################################
#
#Check for numerics
#


echo 
echo -----------------------------
echo Checking for numerics support
echo -----------------------------




###################################################
#
#Allow the user to specify the location of TooN
#
AC_ARG_WITH(TooN, [  --with-TooN=directory   Specify location for TooN ], [opt_toon_dir=$withval])
toondir="Missing"

if test "$opt_toon_dir" != no
then

	#Yes is not a useful answer. We know the answer is yes.
	if test "$opt_toon_dir" = yes
	then
		opt_toon_dir=
	fi

	#Check for TooN
	AC_MSG_CHECKING([for TooN])

	#Check for TooN in a bunch of places
	save_CPPFLAGS="$CPPFLAGS"
	for dir in  $opt_toon_dir "" "$HOME/usr/include" "$HOME/code/TooN" "$HOME/Src/TooN" "../TooN" ".."
	do
		a=
		if test "$dir" = ""
		then
			CPPFLAGS="$save_CPPFLAGS"
		else
			CPPFLAGS="$save_CPPFLAGS -I$dir"
		fi

		AC_COMPILE_IFELSE([#include <TooN/TooN.h>
	int main(){TooN::Vector<2> v;return 0;}], [a=1]) 

		AC_COMPILE_IFELSE([#include <numerics.h>
	int main(){Vector<2> v;return 0;}], [old_toon="$old_toon $dir"]) 
		
		if test x$a = x1
		then
			toondir=$dir
			break
		fi
	done

	if test "$toondir" = ""
	then
		AC_MSG_RESULT(yes)
	else
		AC_MSG_RESULT($toondir)
	fi
fi 

if test "$toondir" = Missing
then
	AC_MSG_WARN(TooN is missing. Numerics support disabled.)
	if test "$old_toon" != ""
	then
	AC_MSG_WARN(You have old versions of TooN installed in $old_toon. These are too old for libCVD.)
	fi
	toon=no
else
	options="$options toon"
	toon=yes
	AC_DEFINE(CVD_HAVE_TOON)
	AC_SUBST(have_toon,yes)
fi

##################################################
#
# Check for BLAS and LAPACK support
#
lapack=no
acml=no

if test "$toon" = yes && test "$host_vendor" == apple
then
	
	save_LIBS="$LIBS"
	LIBS="$LIBS -framework vecLib"


	AC_MSG_CHECKING(vecLib framework)
	a=0
	AC_COMPILE_IFELSE([#include <TooN/SVD.h>
int main(){TooN::Matrix<2> m;TooN::SVD<2> svdm(m);return 0;}], [a=1]) 

	if test x$a	= x1
	then
		AC_MSG_RESULT(yes)
		lapack=yes
		options="$options lapack"
	else
		AC_MSG_RESULT(no)
		LIBS="$save_LIBS"
	fi
fi

define([ER_M4_PASTE], [$1$2])

if test "$toon" = yes && test "$lapack" = no
then

	#This built-in autoconf macro finds the linker flags needed to
	#link with Fortran libraries and sets FCLIBS accordingly
	#AC_FC_LIBRARY_LDFLAGS
	# TODO: We may also need to use AC_FC_DUMMY_MAIN to see whether a dummy
	# Fortran main is needed (see the Autoconf manual). Currently, no machines
	# we compile on seem to need this.

	save_LIBS="$LIBS"
	#LIBS="$LIBS $FCLIBS"


#	AC_MSG_CHECKING([quality of Ac_FC_LIBRARY_LDFLAGS])
#	AC_LINK_IFELSE([int main(){return 0;}], [fc=good],[fc=b0rked]);
#	AC_MSG_RESULT($fc)

	f2c="Missing"
	fc="b0rked"
	if test $fc == b0rked
	then
		AC_MSG_NOTICE(Reverting to old fortran library test.)

		AC_MSG_CHECKING([for C to fortran library])

		#The linking testing function AC_LINK_IFELSE uses LIBS in the 
		#linking stage, so we communicate our requirements by using this
		LIBS="$save_LIBS -lf2c"
		AC_LINK_IFELSE([int main(){return 0;}], [f2c=f2c])

		LIBS="$save_LIBS -lg2c"
		AC_LINK_IFELSE([int main(){return 0;}], [f2c=g2c])

		LIBS="$save_LIBS -lgfortran"
		AC_LINK_IFELSE([int main(){return 0;}], [f2c=gfortran])

		AC_MSG_RESULT($f2c)
		LIBS="$save_LIBS -l$f2c"

		#$LIBS should either havf FCLIBS or -l$f2c present

		opt_acml_dir="no"
		AC_ARG_WITH(acml, [  --with-acml[[=directory]] Use BLAS and LAPACK routines from the ACML library [[located in the specified directory]] ], [opt_acml_dir=$withval])

		if test x$opt_acml_dir == xno
		then
		AC_CHECK_LIB(blas,  dgemm_)
		if test x$ac_cv_lib_blas_dgemm_ != xyes
		then
			AC_MSG_WARN(BLAS is missing. Get it from www.netlib.org/blas);
		else
			AC_CHECK_LIB(lapack,  dgesvd_)
			if test x$ac_cv_lib_lapack_dgesvd_ != xyes
			then
				  AC_MSG_WARN(LAPACK is missing. Get it from www.netlib.org/lapack);
			else
			  options="$options lapack"
			  lapack=yes
			fi
		fi
		else
			AC_MSG_NOTICE(Compiling with acml)

			if test x$opt_acml_dir != xyes
			then
				LDFLAGS="$LDFLAGS -L$opt_acml_dir"
			else
				LDFLAGS="$LDFLAGS -L/opt/acml/gnu64/lib"
			fi

			LIBS="$LIBS -lacml_mv"

			AC_CHECK_LIB(acml, dgemm_)
			AC_CHECK_LIB(acml, dgesvd_)

			if test x$ac_cv_lib_acml_dgemm_$ac_cv_lib_acml_dgesvd_ != xyesyes
			then
				AC_MSG_WARN(ACML is missing. Get it from www.amd.com/acml);
			else
				options="$options acml lapack"
				lapack=yes
				acml=yes
			fi
		fi
	fi

	if test "$lapack" = no
	then
		LIBS="$save_LIBS"
	else
		AC_SUBST(have_lapack,yes)
		AC_DEFINE(CVD_HAVE_LAPACK)

		if test "$acml" = yes
		then
			AC_SUBST(have_acml,yes)
			AC_DEFINE(CVD_HAVE_ACML)
		fi
	fi
fi



cvd_major=`echo $PACKAGE_VERSION | $AWK -F'\\\\.' '{print $1}'`
cvd_minor=`echo $PACKAGE_VERSION | $AWK -F'\\\\.' '{print $2}'`

AC_DEFINE_UNQUOTED(CVD_MAJOR_VERSION,$cvd_major)
AC_SUBST(major, $cvd_major)
AC_DEFINE_UNQUOTED(CVD_MINOR_VERSION,$cvd_minor)
AC_SUBST(minor, $cvd_minor)

################################################################################
#
# platform specific options
echo
echo ---------------------------------------
echo Checking for platform specific features
echo ---------------------------------------

AC_C_BIGENDIAN

if test x$ac_cv_c_bigendian = xno
then
	AC_DEFINE(CVD_ARCH_LITTLE_ENDIAN)
else
	AC_DEFINE(CVD_ARCH_BIG_ENDIAN)
fi

case "$host" in
	*linux*)
		
		os_options="dvbuffer v4l2buffer v4l1buffer"
	
		AC_ARG_WITH(firewire, [  --without-firewire	  compile without firewire (dvbuffer) support],[if test "$withval" = no; then disable_firewire=yes; else disable_firewire=no; fi])
		if test "$disable_firewire" != yes 
		then
			a=
			AC_CHECK_HEADERS(libraw1394/raw1394.h libdc1394/dc1394_control.h, [], [a=1])
			AC_CHECK_LIB(raw1394, main,[],[a=1])
			AC_CHECK_LIB(dc1394_control, main,[],[a=1])
			
			if test x$a = x
			then
				AC_DEFINE(CVD_HAVE_DVBUFFER)
				AC_SUBST(have_dvbuffer, yes)
				options="$options dvbuffer"
			fi
		fi

		AC_ARG_WITH(v4l1, [  --without-v4l1	  compile without v4l1 support],[if test "$withval" = no; then disable_v4l1=yes; else disable_v4l1=no; fi])
		if test "$disable_v4l1" != yes 
		then
			a=
			AC_CHECK_HEADERS(linux/videodev.h, [a=1])
			if test "$a" = 1
			then
				
				AC_DEFINE(CVD_HAVE_V4L1BUFFER)
				AC_SUBST(have_v4l1buffer, yes)
				options="$options v4l1buffer"
			fi
		fi

		AC_ARG_WITH(v4l2, [  --without-v4l2	  compile without v4l2 support],[if test "$withval" = no; then disable_v4l2=yes; else disable_v4l2=no; fi])
		if test "$disable_v4l2" != yes 
		then
			a=no
			AC_LANG(C)
			AC_MSG_CHECKING(for v4l2)
			AC_COMPILE_IFELSE([	#include <sys/types.h>
								#include <linux/types.h>
								#include <linux/videodev.h>
								int main(){V4L2_PIX_FMT_GREY;return 0;}], [a=yes])
			
			AC_LANG(C++)
			AC_MSG_RESULT($a)
			if test "$a" = yes
			then
				AC_DEFINE(CVD_HAVE_V4L2BUFFER)
				AC_SUBST(have_v4l2buffer, yes)
				options="$options v4l2buffer"
			fi
		fi
	
		AC_MSG_CHECKING([kernel major number])
		kernel_major=[`uname -r | $AWK -F'[.-]' '{print $1}'`]
		AC_MSG_RESULT($kernel_major)
		AC_DEFINE_UNQUOTED(CVD_KERNEL_MAJOR,$kernel_major)
		
		AC_MSG_CHECKING([kernel minor number])
		kernel_minor=[`uname -r | $AWK -F'[.-]' '{print $2}'`]
		AC_MSG_RESULT($kernel_minor)
		AC_DEFINE_UNQUOTED(CVD_KERNEL_MINOR,$kernel_minor)

		
		AC_MSG_CHECKING([kernel release number])
		kernel_release=[`uname -r | $AWK -F'[.-]' '{print $3}'`]
		AC_MSG_RESULT($kernel_release)
		AC_DEFINE_UNQUOTED(CVD_KERNEL_RELEASE,$kernel_release)
	;;
	*sgi*)
		os_options="O2buffer"
		AC_DEFINE(CVD_HAVE_O2UBFFER)
		AC_SUBST(have_o2buffer,yes)
	
		AC_ARG_WITH(o2buffer, [  --without-o2buffer	  compile without sgi video],[if test "$withval" = no; then disable_o2buffer=yes; else disable_o2buffer=no; fi])
		if test "$disable_o2buffer" != yes
		then
			echo "I hope all SGIs have stuff needed for O2buffer. Disable (--without-o2buffer) if I'm wrong."
			options="$options O2buffer"
		fi
	;;
esac

if test "$host_vendor" == apple
then
	os_options="qtbuffer"
	AC_ARG_WITH(quicktime, [  --without-quicktime	  compile without quicktime buffer support],[if test "$withval" = no; then disable_qtbuffer=yes; else disable_qtbuffer=no; fi])
	if test "$disable_qtbuffer" != yes 
	then
		save_LIBS="$LIBS"
		LIBS="$LIBS -framework Carbon -framework QuickTime"

		AC_MSG_CHECKING(Carbon and QuickTime framework)
		a=0
		AC_COMPILE_IFELSE([ #include <Carbon/Carbon.h>
							#include <QuickTime/QuickTime.h>
							int main(){InitCursor();EnterMovies();return 0;}], [a=1]) 

		if test x$a	= x1
		then
			AC_MSG_RESULT(yes)
			AC_DEFINE(CVD_HAVE_QTBUFFER)
			AC_SUBST(have_qtbuffer, yes)
			options="$options qtbuffer"
		else
			AC_MSG_RESULT(no)
			LIBS="$save_LIBS"
		fi
	fi
fi


################################################################################
#
#Check for optional libraries
#

echo
echo -------------------------------
echo Checking for optional libraries
echo -------------------------------

AC_ARG_WITH(threads, [  --without-threads       compile without PThread support],[if test "$withval" = no; then disable_threads=yes; else disable_threads=no; fi])
if test "$disable_threads" != yes 
then

	AC_MSG_CHECKING(for working pthreads)
	save_CXXFLAGS="$CXXFLAGS"
	CXXFLAGS="$CXXFLAGS -pthread"
	a=0
	AC_COMPILE_IFELSE([#include <pthread.h>
						void*foo(void*){}
						int main(){pthread_create(0,0,foo,0);return 0;}],[a=1])
	if test $a == 1
	then
		AC_MSG_RESULT(yes)
		AC_DEFINE(CVD_HAVE_PTHREAD, 1)
		AC_SUBST(have_pthread,yes)
		LIBS="$LIBS -pthread"
		options="$options pthreads"

		# check for existence of pthread_yield
		# Mac OS X only has pthread_yield_np
		AC_CHECK_FUNCS(pthread_yield, AC_DEFINE(CVD_HAVE_PTHREAD_YIELD))
		AC_CHECK_FUNCS(pthread_yield_np, AC_DEFINE(CVD_HAVE_PTHREAD_YIELD_NP))
	else
		AC_MSG_RESULT(no)
		CXXFLAGS="$save_CXXFLAGS"
	fi
fi

AC_PATH_X

save_CXXFLAGS="$CXXFLAGS"
save_LIBS="$LIBS"
if test "x$ac_cv_have_x" != x
then
	LIBS="-L$x_libraries -lX11 -lXext $LIBS"
	if test "x$x_includes" != x
	then
		CXXFLAGS="$CXXFLAGS -I$x_includes"
	fi

	AC_CHECK_LIB(GL,glDrawPixels)

	if test "$ac_cv_lib_GL_glDrawPixels" != no
	then
		AC_DEFINE(CVD_HAVE_VIDEODISPLAY)
		options="$options videodisplay"
		AC_SUBST(have_videodisplay, yes)
		LIBS="-lGL $LIBS"
	else
		LIBS="$save_LIBS"
		CXXFLAGS="$CXXFLAGS"
	fi
fi

#Put this before TIFF. If libjpeg is static, then this will ensure
#(hopefully) that it selected before libtiff is tested (libtiff may
#depend on libjpeg)
AC_ARG_WITH(jpeg, [  --without-jpeg	  compile without JPEG support],[if test "$withval" = no; then disable_jpeg=yes; else disable_jpeg=no; fi])
if test "$disable_jpeg" != yes 
then
	AC_CHECK_HEADERS(jpeglib.h)
	AC_CHECK_LIB(jpeg, jpeg_destroy_decompress)
	if test "$ac_cv_header_jpeglib_h" = yes && test "$ac_cv_lib_jpeg_jpeg_destroy_decompress" = yes
	then
		AC_DEFINE(CVD_IMAGE_HAVE_JPEG, [JPEG,])
		AC_SUBST(have_jpeg,yes)
		options="$options jpeg"
	fi
fi


tiffarg=
#AC_ARG_WITH(tiff, [  --without-tiff       compile without TIFF support],[if test "$withval" = no; then disable_tiff=yes; else disable_tiff=no; fi])
AC_ARG_WITH(tiff, [  --without-tiff          compile without TIFF support],[tiffarg="$withval";])
AC_ARG_WITH(tiff, [  --with-tiff=forceold    Debug/wierd build environment only. Force use of older library facilities.],[tiffarg="$withval";])



disable_tiff=no
if test "$tiffarg" = no
then
	disable_tiff=yes
elif test "$tiffarg" = forceold
then
	force_old_tiff=yes
fi

if test "$disable_tiff" != yes 
then
	AC_CHECK_HEADERS(tiffio.h)
	if test "$ac_cv_header_tiffio_h" = yes 
	then
	
		foo_LIBS="$LIBS"
		tiff_works=

		#Repeat twice, once for normal checking
		#and once with an additional check for zlib
		for i in 1 2
		do

			#Check first for new style tiff

			if test "$force_old_tiff" != yes
			then
				AC_CHECK_LIB(tiff, TIFFReadRGBAImageOriented)
				test x$ac_cv_lib_tiff_TIFFReadRGBAImageOriented == xyes && tiff_works=yes
			fi

			if test x$tiff_works == x
			then
				AC_CHECK_LIB(tiff, TIFFReadRGBAImage)
				test x$ac_cv_lib_tiff_TIFFReadRGBAImage == xyes && tiff_works=old
			fi 

			if test x$tiff_works == x && test $i == 1
			then	
				AC_MSG_CHECKING([if perhaps libtiff requires zlib])
				AC_MSG_RESULT()
				AC_CHECK_LIB(z, deflate)
				unset ac_cv_lib_tiff_TIFFReadRGBAImage
				unset ac_cv_lib_tiff_TIFFReadRGBAImageOriented
				tiff_needs_zlib=1
			else
				break
			fi
		done

		if test x$tiff_works == x
		then 
			#This removes the extraneous zlib
			LIBS=$foo_LIBS
		else
			AC_DEFINE(CVD_IMAGE_HAVE_TIFF, [TIFF,])
			AC_SUBST(have_tiff,yes)
			options="$options tiff"

			if test x$tiff_works == xold
			then
				AC_MSG_WARN(libtiff is present but old. Loading large TIFFs might be slow.)
				dodginess_options="$dodginess_options oldtiff"
			else
				AC_DEFINE(CVD_INTERNAL_HAVE_TIFF_ORIENTED, [TIFF,])
			fi

			if test x$tiff_needs_zlib != x
			then
				AC_MSG_WARN(libtiff is present but requires zlib to be specified manually. Something is odd about your build system)
				dodginess_options="$dodginess_options tiff_needs_zlib"
			fi
		fi
	fi
fi



#Put this before TIFF. If libjpeg is static, then this will ensure
#(hopefully) that it selected before libtiff is tested (libtiff may
#depend on libjpeg)
AC_ARG_WITH(png, [  --without-png           compile without PNG support],[if test "$withval" = no; then disable_png=yes; else disable_png=no; fi])
if test "$disable_png" != yes 
then
	AC_CHECK_HEADERS(png.h)
	AC_CHECK_LIB(png, png_init_io)
	if test "$ac_cv_header_png_h" = yes && test "$ac_cv_lib_png_png_init_io" = yes
	then
		AC_DEFINE(CVD_IMAGE_HAVE_PNG, [PNG,])
		AC_SUBST(have_png,yes)
		options="$options png"
	fi
fi

AC_ARG_WITH(ffmpeg, [  --without-ffmpeg	  compile without FFMPEG support],[if test "$withval" = no; then use_ffmpeg=no; else use_ffmpeg="$withval"; fi])
if test "$use_ffmpeg" != no
then
	save_LIBS="$LIBS"
	if test x"$use_ffmpeg" != x
	then 
		LIBS="$LIBS -L $use_ffmpeg"
	fi

	gxx_version=`$CXX -dumpversion`
	if test $gxx_version = 4.1.0
	then
		CXXFLAGS="$CXXFLAGS -D__STDC_CONSTANT_MACROS"
	fi

	a=
	AC_CHECK_HEADERS(ffmpeg/avcodec.h ffmpeg/avformat.h, [], [break])
	AC_CHECK_LIB(avutil, main)
	AC_CHECK_LIB(avcodec, avcodec_open)
	AC_CHECK_LIB(avformat, av_open_input_file)
	AC_CHECK_LIB(avformat, av_read_frame) #only in >= 0.4.9
	if test "$ac_cv_lib_avcodec_avcodec_open$ac_cv_lib_avformat_av_open_input_file" = yesyes
	then
		if test "$ac_cv_lib_avformat_av_read_frame" = yes
		then
			AC_DEFINE(CVD_HAVE_FFMPEG)
			AC_SUBST(have_ffmpeg, yes)
			options="$options ffmpeg"
			save_LIBS="$LIBS"
		else
			echo "You have FFMPEG, but the version is too old. Version 0.4.9 or newer is required."
		fi
	fi

	LIBS="$save_LIBS"
fi

################################################################################
#
# platform compatibility
echo
echo -----------------------------------
echo Checking for platform compatibility 
echo -----------------------------------

AC_MSG_CHECKING(for GLOB_BRACE and GLOB_TILDE in glob.h)
a=
AC_COMPILE_IFELSE([#include <glob.h>
int main(){glob(0, GLOB_BRACE|GLOB_TILDE,0,0);}], [a=1]) 

if test x$a = x1
then
	AC_MSG_RESULT(yes)
else
	AC_MSG_RESULT(no)
	AC_MSG_WARN(glob matching is only partly functional. Your existing globs may not work.)
	AC_DEFINE(CVD_INTERNAL_GLOB_IS_BAD)
	dodginess_options="$dodginess_options broken_glob"
fi

a=
AC_CHECK_DECL(feenableexcept, [a=1], [a= ], [#include <fenv.h>])
if test x$a = x1
then
	AC_DEFINE(CVD_HAVE_FENV_H)
else
	dodginess_options="$dodginess_options missing_c99_feenableexcept"
fi

AC_MSG_CHECKING(for posix_memalign)
a=0
AC_COMPILE_IFELSE([#include <stdlib.h>
				int main(){void* mem; posix_memalign(&mem,16,100); return 0;}],[a=1])
if test $a == 1
then
	AC_MSG_RESULT(yes)
	AC_DEFINE(CVD_HAVE_MEMALIGN, 1)
	AC_SUBST(have_memalign,yes)
else
	AC_MSG_RESULT(no)
	AC_SUBST(have_memalign,no)
	dodginess_options="$dodginess_options no_posix_memalign"
fi		


################################################################################
#
# Extra build options
echo
echo --------------------------------
echo Checking for extra build options
echo --------------------------------

AC_CHECK_PROG(docs, doxygen, docs, no)

if test "$cpu" == ""
then
	cpu=generic
fi

AC_SUBST(cpu,$cpu)


D_PROGS='progs/se3_exp             toon
		progs/se3_ln               toon                 
		progs/se3_pre_mul          toon                 
		progs/se3_post_mul         toon                 
		progs/se3_inv              toon                 
		progs/img_play             videodisplay         
		progs/cvd_display_image    videodisplay         
		progs/img_play_bw          videodisplay         
		progs/img_play_deinterlace videodisplay         
		progs/video_play           videodisplay  ffmpeg 
		progs/video_play_bw        videodisplay  ffmpeg '
progs="`echo $options $D_PROGS | $AWK -v stub=progs -f make/prog_dependencies.awk`"
AC_SUBST(progs,$progs)


echo $options $D_PROGS > foo

T_PROGS='
test/diskbuffer2					videodisplay
test/dvbuffer_mono  				videodisplay dvbuffer
test/dvbuffer_yuvrgb  			videodisplay dvbuffer
test/test_images       			
test/v4l1buffer_mono  			videodisplay v4l1buffer
test/v4l2buffer					videodisplay v4l2buffer
test/dvbuffer_controls 			videodisplay dvbuffer 
test/dvbuffer_rgb   				videodisplay dvbuffer
test/o2buffer        			videodisplay o2buffer
test/v4l1buffer_bayer 			videodisplay v4l1buffer 
test/v4l1buffer_rgb  			videodisplay v4l1buffer
test/qtbuffer_yuvrgb            videodisplay qtbuffer '
testprogs="`echo $options $T_PROGS | $AWK -v stub=test -f make/prog_dependencies.awk`"
AC_SUBST(testprogs,$testprogs)

AC_OUTPUT(Makefile)


cat << FOO > cvd/config.h
#ifndef CVD_CONFIG_H
#define CVD_CONFIG_H
FOO
echo '#define CVD_HAVE_CPU_'$host_cpu 1 | cat - confdefs.h | grep CVD_ | sort | sed 's/#define CVD_.*HAVE_\(.*\) .*/#ifndef CVD_DISABLE_\1\
    &\
#endif/' >> cvd/config.h
echo '#endif' >> cvd/config.h


AC_SUBST(debug_options,$options)
all_opts="$all_options $os_options"
AC_SUBST(debug_all_options,"$all_opts")

if test ! -r .deps
then
echo > .deps
fi


changequote(, )
echo
echo Options:
echo $options
echo
echo Missing options for $host_os:
echo $options $all_options $os_options |  tr ' ' '\n' | sort | uniq -u | tr '\n' ' '; echo
echo 
echo Dodgy things:
echo $dodginess_options 
echo
echo SIMD support:
echo $simd_options
echo
echo Missing SIMD support for $host:
echo $simd_possible_options $simd_options | tr ' ' '\n' |  sort | uniq -u | tr '\n' ' '; echo
echo

changequote([,])

echo
echo Programs
echo $progs | sed -e's!progs/!!g'
echo 
echo Debug:
echo CPPFLAGS="$CPPFLAGS"
echo CXXFLAGS="$CXXFLAGS"
echo OFLAGS="$OFLAGS"
echo LIBS="$LIBS"
